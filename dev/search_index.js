var documenterSearchIndex = {"docs":
[{"location":"materials/","page":"Materials","title":"Materials","text":"CurrentModule = Cthonios","category":"page"},{"location":"materials/#Materials","page":"Materials","title":"Materials","text":"","category":"section"},{"location":"materials/","page":"Materials","title":"Materials","text":"Cthonios utilizes ConstitutiveModels.jl as a material model backend.","category":"page"},{"location":"materials/","page":"Materials","title":"Materials","text":"Here is an example for how to define multiple materials within an input file","category":"page"},{"location":"materials/","page":"Materials","title":"Materials","text":"materials:\n  metal_linear:\n    model: LinearElastic\n    properties:\n      youngs modulus: 1.0\n      poissons ratio: 0.3\n  soft rubber:\n    model: NeoHookean\n    properties:\n      bulk modulus: 50.0\n      shear modulus: 1.0","category":"page"},{"location":"materials/#Useful-methods","page":"Materials","title":"Useful methods","text":"","category":"section"},{"location":"materials/","page":"Materials","title":"Materials","text":"TODO","category":"page"},{"location":"sections/","page":"Sections","title":"Sections","text":"CurrentModule = Cthonios","category":"page"},{"location":"sections/#Sections","page":"Sections","title":"Sections","text":"","category":"section"},{"location":"sections/","page":"Sections","title":"Sections","text":"Within Cthonios, sections refer to groups or \"blocks\" of elements that share a common element topology and material model. We allow by default for each element to possess different fixed material properties and an arbitrary number of state variables. Since the material model is the same for all elements in a section, the number of state variables will be the same at each element/quadrature point.","category":"page"},{"location":"sections/#Input-file-syntax","page":"Sections","title":"Input file syntax","text":"","category":"section"},{"location":"sections/","page":"Sections","title":"Sections","text":"TODO","category":"page"},{"location":"sections/","page":"Sections","title":"Sections","text":"Modules = [Cthonios]\nPages = [\"Sections.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"sections/#Cthonios.AbstractSectionInput","page":"Sections","title":"Cthonios.AbstractSectionInput","text":"abstract type AbstractSectionInput\n\n\n\n\n\n","category":"type"},{"location":"sections/#Cthonios.AbstractSectionInternal","page":"Sections","title":"Cthonios.AbstractSectionInternal","text":"abstract type AbstractSectionInternal{P, F}\n\n\n\n\n\n","category":"type"},{"location":"sections/#Cthonios.TotalLagrangeSection","page":"Sections","title":"Cthonios.TotalLagrangeSection","text":"struct TotalLagrangeSection{P} <: Cthonios.AbstractSectionInput\n\nphysics::Any\nblock_name::String\nq_order::Int64\n\n\n\n\n\n","category":"type"},{"location":"sections/#Cthonios.TotalLagrangeSectionInternal","page":"Sections","title":"Cthonios.TotalLagrangeSectionInternal","text":"struct TotalLagrangeSectionInternal{P, F} <: Cthonios.AbstractSectionInternal{P, F}\n\nphysics::Any\nblock_name::String\nfspace::Any\n\n\n\n\n\n","category":"type"},{"location":"sections/#Cthonios.TotalLagrangeSectionInternal-Tuple{Any, Any, Any}","page":"Sections","title":"Cthonios.TotalLagrangeSectionInternal","text":"TotalLagrangeSectionInternal(\n    mesh,\n    dof,\n    section\n) -> Cthonios.TotalLagrangeSectionInternal\n\n\n\n\n\n\n","category":"method"},{"location":"sections/#Base.size-Tuple{Cthonios.AbstractSectionInternal}","page":"Sections","title":"Base.size","text":"size(\n    section::Cthonios.AbstractSectionInternal\n) -> NTuple{4, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"domains/","page":"Domains","title":"Domains","text":"CurrentModule = Cthonios","category":"page"},{"location":"domains/#Domains","page":"Domains","title":"Domains","text":"","category":"section"},{"location":"domains/","page":"Domains","title":"Domains","text":"A domain in Cthonios is a group of element sections and all the associated datastructures necessary to run a finite element calculation. Different types of domains are used for different problems, e.g. quasi-static vs. dynamics problems have different requirements and solution strategies.","category":"page"},{"location":"domains/#Input-file-syntax-example","page":"Domains","title":"Input file syntax example","text":"","category":"section"},{"location":"domains/","page":"Domains","title":"Domains","text":"domains:\n  domain_1:\n    mesh:\n      ...\n    boundary conditions:\n      ...\n    sections:\n      ...\n    time stepper:\n      ...","category":"page"},{"location":"domains/#Quasi-static-Domain","page":"Domains","title":"Quasi-static Domain","text":"","category":"section"},{"location":"domains/","page":"Domains","title":"Domains","text":"Quasi-static domains are appropriate for problems where the following equation holds","category":"page"},{"location":"domains/","page":"Domains","title":"Domains","text":"nablacdot mathbfP + mathbfb = mathbf0 where mathbfP is the first Piola-Kirchoff stress, nabla is the gradient operator with respsect to the reference corrdinates, and mathbfb is a body force.","category":"page"},{"location":"domains/#Index","page":"Domains","title":"Index","text":"","category":"section"},{"location":"domains/","page":"Domains","title":"Domains","text":"Modules = [Cthonios]\nPages = [\"Domains.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"domains/#Cthonios.AbstractDomain","page":"Domains","title":"Cthonios.AbstractDomain","text":"abstract type AbstractDomain\n\n\n\n\n\n","category":"type"},{"location":"domains/#Cthonios.Domain","page":"Domains","title":"Cthonios.Domain","text":"struct Domain{M, D, S, DBCs, DDofs} <: Cthonios.AbstractDomain\n\nmesh::Any\ndof::Any\nsections::Any\ndirichlet_bcs::Any\ndirichlet_dofs::Any\n\n\n\n\n\n","category":"type"},{"location":"domains/#Cthonios.Domain-Tuple{String, Any, Any, Int64}","page":"Domains","title":"Cthonios.Domain","text":"Domain(\n    mesh_file::String,\n    sections_in,\n    dbcs_in,\n    n_dofs::Int64\n) -> Domain{M, D, S, _A, Vector{Int64}} where {M<:(FiniteElementContainers.FileMesh{Exodus.ExodusDatabase{M, I, B, F, Init}} where {M, I, B, F, Init}), D<:(FiniteElementContainers.DofManager{Int64, _A, _B, Vector{Float64}, _C} where {_A, _B, _C<:(AbstractArray{Int64})}), S<:NamedTuple, _A}\n\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.StaticAssembler-Tuple{Domain}","page":"Domains","title":"Cthonios.StaticAssembler","text":"StaticAssembler(\n    domain::Domain\n) -> FiniteElementContainers.StaticAssembler{Float64, Int64, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, Vector{Int64}, Vector{Int64}, Vector{Float64}} where {_A<:AbstractVector{Int64}, _B<:AbstractVector{Int64}, _C<:AbstractVector{Int64}, _D<:AbstractVector{Int64}, _E<:AbstractVector{Int64}, _F<:FiniteElementContainers.NodalField, _G<:AbstractVector{Float64}, _H, _I, _J, _K}\n\n\nsome FEMContainers abuse\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.create_fields-Tuple{Domain}","page":"Domains","title":"Cthonios.create_fields","text":"create_fields(domain::Domain) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.create_unknowns-Tuple{Domain}","page":"Domains","title":"Cthonios.create_unknowns","text":"create_unknowns(domain::Domain) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.dirichlet_dofs-Tuple{Domain}","page":"Domains","title":"Cthonios.dirichlet_dofs","text":"dirichlet_dofs(domain::Domain) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.update_field_bcs!-Tuple{Any, Domain, Any}","page":"Domains","title":"Cthonios.update_field_bcs!","text":"update_field_bcs!(U, domain::Domain, Ubc)\n\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.update_unknown_dofs!-Tuple{Domain, Any}","page":"Domains","title":"Cthonios.update_unknown_dofs!","text":"update_unknown_dofs!(domain::Domain, asm)\n\n\n\n\n\n\n","category":"method"},{"location":"domains/#Cthonios.update_unknown_dofs!-Tuple{Domain}","page":"Domains","title":"Cthonios.update_unknown_dofs!","text":"update_unknown_dofs!(domain::Domain)\n\n\n\n\n\n\n","category":"method"},{"location":"linear_solvers/","page":"Linear solvers","title":"Linear solvers","text":"CurrentModule = Cthonios","category":"page"},{"location":"linear_solvers/#Linear-Solvers","page":"Linear solvers","title":"Linear Solvers","text":"","category":"section"},{"location":"linear_solvers/","page":"Linear solvers","title":"Linear solvers","text":"This section describes the interface for linear solvers.","category":"page"},{"location":"linear_solvers/#Input-File-Syntax-Example","page":"Linear solvers","title":"Input File Syntax Example","text":"","category":"section"},{"location":"linear_solvers/","page":"Linear solvers","title":"Linear solvers","text":"Below is an example input file block for a direct solver with an LDLT factorization.","category":"page"},{"location":"linear_solvers/","page":"Linear solvers","title":"Linear solvers","text":"linear solvers:\n  direct:\n    type: DirectLinearSolver\n    factorization method: ldl","category":"page"},{"location":"linear_solvers/#General-methods-and-abstract-types","page":"Linear solvers","title":"General methods and abstract types","text":"","category":"section"},{"location":"linear_solvers/","page":"Linear solvers","title":"Linear solvers","text":"Modules = [Cthonios]\nPages = [\"solvers/linear_solvers/LinearSolvers.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"linear_solvers/#Cthonios.AbstractLinearSolver","page":"Linear solvers","title":"Cthonios.AbstractLinearSolver","text":"abstract type AbstractLinearSolver\n\nA linear solver simply needs to define the following methods\n\nresidual_norm\nsolve!\n\nsolve! method which has the following signature solve!(ΔUu, solver::DirectSolver, obj, Uu, p) where ΔUu is the increment for a nonlinear solver solver is the solver, obj is the objective, Uu is the current guess of the solution, and p is the set of parameters\n\n\n\n\n\n","category":"type"},{"location":"linear_solvers/#Direct-Solver","page":"Linear solvers","title":"Direct Solver","text":"","category":"section"},{"location":"linear_solvers/","page":"Linear solvers","title":"Linear solvers","text":"Modules = [Cthonios]\nPages = [\"solvers/linear_solvers/DirectSolver.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"linear_solvers/#Cthonios.DirectSolver","page":"Linear solvers","title":"Cthonios.DirectSolver","text":"assembler::Any\nlinsolve::Any\ntimer::Any\n\nDirect linear solver\n\n\n\n\n\n","category":"type"},{"location":"linear_solvers/#Cthonios.DirectSolver-Tuple{Domain, Any}","page":"Linear solvers","title":"Cthonios.DirectSolver","text":"DirectSolver(\n    domain::Domain,\n    timer\n) -> DirectSolver{A, L} where {A<:(FiniteElementContainers.StaticAssembler{Float64, Int64, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, Vector{Int64}, Vector{Int64}, Vector{Float64}} where {_A<:AbstractVector{Int64}, _B<:AbstractVector{Int64}, _C<:AbstractVector{Int64}, _D<:AbstractVector{Int64}, _E<:AbstractVector{Int64}, _F<:FiniteElementContainers.NodalField, _G<:AbstractVector{Float64}, _H, _I, _J, _K}), L<:(LinearSolve.LinearCache{LinearAlgebra.Symmetric{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}}, _A, _B, SciMLBase.NullParameters, LinearSolve.DefaultLinearSolver, LinearSolve.DefaultLinearSolverInit{LinearAlgebra.LU{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Int64}}, LinearAlgebra.QR{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}}, Nothing, Nothing, Sparspak.SpkSparseSolver.SparseSolver{Int64, Float64}, Nothing, Nothing, _A1, LinearAlgebra.LU{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Int64}}, Tuple{LinearAlgebra.LU{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Int64}}, Vector{Int64}}, Nothing, Nothing, SparseArrays.CHOLMOD.Factor{Float64, Int64}, Nothing, SparseArrays.CHOLMOD.Factor{Float64, Int64}, SparseArrays.CHOLMOD.Factor{Float64, Int64}, Tuple{LinearAlgebra.LU{Float64, Matrix{Float64}, Vector{Int32}}, Base.RefValue{Int32}}, Tuple{LinearAlgebra.LU{Float64, Matrix{Float64}, Vector{Int64}}, Base.RefValue{Int64}}, LinearAlgebra.QR{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}}, _B1, _C}, SciMLOperators.IdentityOperator, SciMLOperators.IdentityOperator, _C1, Bool} where {_A, _B, _A1, _B1, _C, _C1})}\n\n\nDirect linear solver constructor from a Domain\n\n\n\n\n\n","category":"method"},{"location":"linear_solvers/#Cthonios.gradient!-Tuple{DirectSolver, Objective, Any, ObjectiveParameters}","page":"Linear solvers","title":"Cthonios.gradient!","text":"gradient!(\n    solver::DirectSolver,\n    obj::Objective,\n    Uu,\n    p::ObjectiveParameters\n)\n\n\n\n\n\n\n","category":"method"},{"location":"linear_solvers/#Cthonios.hessian!-Tuple{DirectSolver, Any, Any, Any}","page":"Linear solvers","title":"Cthonios.hessian!","text":"hessian!(solver::DirectSolver, obj, Uu, p)\n\n\n\n\n\n\n","category":"method"},{"location":"linear_solvers/#Cthonios.residual_norm-Tuple{DirectSolver}","page":"Linear solvers","title":"Cthonios.residual_norm","text":"residual_norm(solver::DirectSolver) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"linear_solvers/#Cthonios.solve!-Tuple{Any, DirectSolver, Any, Any, Any}","page":"Linear solvers","title":"Cthonios.solve!","text":"solve!(ΔUu, solver::DirectSolver, obj, Uu, p)\n\n\n\n\n\n\n","category":"method"},{"location":"nonlinear_solvers/","page":"Nonlinear solvers","title":"Nonlinear solvers","text":"CurrentModule = Cthonios","category":"page"},{"location":"nonlinear_solvers/#Nonlinear-Solvers","page":"Nonlinear solvers","title":"Nonlinear Solvers","text":"","category":"section"},{"location":"nonlinear_solvers/","page":"Nonlinear solvers","title":"Nonlinear solvers","text":"One of our goals is to make adding new and hacking existing nonlinear solvers easy!","category":"page"},{"location":"nonlinear_solvers/#Input-File-Syntax-Example","page":"Nonlinear solvers","title":"Input File Syntax Example","text":"","category":"section"},{"location":"nonlinear_solvers/","page":"Nonlinear solvers","title":"Nonlinear solvers","text":"Below is an example input file block for a trust region solver that leverages a direct solver with an LDLT factorization. The nonlinear solver is also utilizing warm start to improve the first few iterations of each load step.","category":"page"},{"location":"nonlinear_solvers/","page":"Nonlinear solvers","title":"Nonlinear solvers","text":"linear solvers:\n  direct:\n    type: DirectLinearSolver\n    factorization method: ldl\n\nnonlinear solvers:\n  trs:\n    type: TrustRegionSolver\n    linear solver: direct\n    warm start: on","category":"page"},{"location":"nonlinear_solvers/#General-methods-and-abstract-types","page":"Nonlinear solvers","title":"General methods and abstract types","text":"","category":"section"},{"location":"nonlinear_solvers/","page":"Nonlinear solvers","title":"Nonlinear solvers","text":"Modules = [Cthonios]\nPages = [\"solvers/nonlinear_solvers/NonlinearSolvers.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"nonlinear_solvers/#Cthonios.AbstractNonlinearSolver","page":"Nonlinear solvers","title":"Cthonios.AbstractNonlinearSolver","text":"abstract type AbstractNonlinearSolver{L, O, U, T}\n\na nonlinear solver needs to define the following methods\n\ncheck_convergence - returns a bool \nlogger - @info information\nstep! - step for the solver\n\nit needs the following types\n\na linear solver\nan objective\nan unknown vector\nan int called max_iter\n\n\n\n\n\n","category":"type"},{"location":"nonlinear_solvers/#Cthonios.create_unknowns-Tuple{Cthonios.AbstractNonlinearSolver}","page":"Nonlinear solvers","title":"Cthonios.create_unknowns","text":"create_unknowns(\n    solver::Cthonios.AbstractNonlinearSolver\n) -> Any\n\n\nCreates a set of unknowns for the nonlinear solver\n\n\n\n\n\n","category":"method"},{"location":"nonlinear_solvers/#Cthonios.solve!-Tuple{Cthonios.AbstractNonlinearSolver, Any, Any}","page":"Nonlinear solvers","title":"Cthonios.solve!","text":"solve!(solver::Cthonios.AbstractNonlinearSolver, Uu, p)\n\n\nGeneric method to fall back on if step! is defined\n\n\n\n\n\n","category":"method"},{"location":"nonlinear_solvers/#Newton-Solver","page":"Nonlinear solvers","title":"Newton Solver","text":"","category":"section"},{"location":"nonlinear_solvers/","page":"Nonlinear solvers","title":"Nonlinear solvers","text":"Modules = [Cthonios]\nPages = [\"solvers/nonlinear_solvers/NewtonSolver.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"nonlinear_solvers/#Cthonios.NewtonSolver","page":"Nonlinear solvers","title":"Cthonios.NewtonSolver","text":"struct NewtonSolver{L, O, U, T} <: Cthonios.AbstractNonlinearSolver{L, O, U, T}\n\nlinear_solver::Any\nobjective::Any\nΔUu::Any\ntimer::Any\nmax_iter::Int64\nabs_tol::Float64\nrel_tol::Float64\nuse_warm_start::Bool\n\n\n\n\n\n","category":"type"},{"location":"nonlinear_solvers/#Cthonios.NewtonSolver-Tuple{Objective, Any, Any, Any}","page":"Nonlinear solvers","title":"Cthonios.NewtonSolver","text":"NewtonSolver(\n    objective::Objective,\n    p,\n    linear_solver_type,\n    timer\n) -> NewtonSolver{_A, O} where {_A, O<:Objective}\n\n\n\n\n\n\n","category":"method"},{"location":"nonlinear_solvers/#Cthonios.check_convergence-Tuple{NewtonSolver, Any}","page":"Nonlinear solvers","title":"Cthonios.check_convergence","text":"check_convergence(solver::NewtonSolver, R0_norm) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"nonlinear_solvers/#Cthonios.logger-Tuple{NewtonSolver, Int64, Any}","page":"Nonlinear solvers","title":"Cthonios.logger","text":"logger(solver::NewtonSolver, n::Int64, norm_R0)\n\n\n\n\n\n\n","category":"method"},{"location":"nonlinear_solvers/#Cthonios.step!-Tuple{NewtonSolver, Any, Any}","page":"Nonlinear solvers","title":"Cthonios.step!","text":"step!(solver::NewtonSolver, Uu, p)\n\n\n\n\n\n\n","category":"method"},{"location":"iterators/","page":"Iterators","title":"Iterators","text":"CurrentModule = Cthonios","category":"page"},{"location":"iterators/#Iterators","page":"Iterators","title":"Iterators","text":"","category":"section"},{"location":"iterators/","page":"Iterators","title":"Iterators","text":"Modules = [Cthonios]\nPages = [\"Iterators.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"iterators/#Cthonios.domain_iterator!-Tuple{Any, Any, Any, Any, ObjectiveParameters}","page":"Iterators","title":"Cthonios.domain_iterator!","text":"domain_iterator!(\n    global_val,\n    f,\n    domain,\n    Uu,\n    p::ObjectiveParameters\n)\n\n\nIterator over a domain domain to fill a global value global_val based on a quadrature level function  f provided a nodal field U and set of paramaters p. This method is useful for filling quantities such as objectives, gradients, or hessians.\n\n\n\n\n\n","category":"method"},{"location":"iterators/#Cthonios.domain_iterator!-Tuple{Any, Any, Domain, Any, FiniteElementContainers.NodalField}","page":"Iterators","title":"Cthonios.domain_iterator!","text":"domain_iterator!(\n    global_val,\n    f,\n    domain::Domain,\n    U,\n    X::FiniteElementContainers.NodalField\n)\n\n\nIterator over a domain domain to fill a global value global_val based on a quadrature level function  f provided a nodal field U and set of paramaters p. This method is useful for filling quantities such as objectives, gradients, or hessians.\n\n\n\n\n\n","category":"method"},{"location":"iterators/#Cthonios.domain_iterator!-Tuple{Any, Any, Domain, Any, ObjectiveParameters, Any}","page":"Iterators","title":"Cthonios.domain_iterator!","text":"domain_iterator!(\n    global_val,\n    f,\n    domain::Domain,\n    Uu,\n    p::ObjectiveParameters,\n    Vv\n)\n\n\nIterator over a domain domain to fill a global value global_val based on a quadrature level function  f provided a nodal field U, a set of paramaters p, and a vector V. This method is useful for quantities such as hessian vector productions.\n\n\n\n\n\n","category":"method"},{"location":"iterators/#Cthonios.domain_iterator!-Tuple{Any, Any, Domain, FiniteElementContainers.NodalField, FiniteElementContainers.NodalField, FiniteElementContainers.NodalField}","page":"Iterators","title":"Cthonios.domain_iterator!","text":"domain_iterator!(\n    global_val,\n    f,\n    domain::Domain,\n    U::FiniteElementContainers.NodalField,\n    X::FiniteElementContainers.NodalField,\n    V::FiniteElementContainers.NodalField\n)\n\n\nIterator over a domain domain to fill a global value global_val based on a quadrature level function  f provided a nodal field U, a set of paramaters p, and a vector V. This method is useful for quantities such as hessian vector productions.\n\n\n\n\n\n","category":"method"},{"location":"iterators/#Cthonios.scratch_variable-Tuple{FiniteElementContainers.StaticAssembler, Any}","page":"Iterators","title":"Cthonios.scratch_variable","text":"scratch_variable(\n    global_val::FiniteElementContainers.StaticAssembler,\n    section\n) -> Any\n\n\nSetup a scratch variable for a stiffness like calculation\n\n\n\n\n\n","category":"method"},{"location":"iterators/#Cthonios.scratch_variable-Tuple{Vector, Any}","page":"Iterators","title":"Cthonios.scratch_variable","text":"scratch_variable(global_val::Vector, section) -> Any\n\n\nSetup a scratch variable for an energy like calculation\n\n\n\n\n\n","category":"method"},{"location":"iterators/#Cthonios.scratch_variable-Union{Tuple{T}, Tuple{T, Any}} where T<:Union{FiniteElementContainers.NodalField, Matrix}","page":"Iterators","title":"Cthonios.scratch_variable","text":"scratch_variable(\n    global_val::Union{FiniteElementContainers.NodalField, Matrix},\n    section\n) -> Any\n\n\nSetup a scratch variable for a force like calculation\n\n\n\n\n\n","category":"method"},{"location":"objectives/","page":"Objectives","title":"Objectives","text":"CurrentModule = Cthonios","category":"page"},{"location":"objectives/#Objectives","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"objectives/","page":"Objectives","title":"Objectives","text":"Modules = [Cthonios]\nPages = [\"Objectives.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"objectives/#Cthonios.AbstractObjective","page":"Objectives","title":"Cthonios.AbstractObjective","text":"abstract type AbstractObjective\n\n\n\n\n\n","category":"type"},{"location":"objectives/#Cthonios.AbstractObjectiveParameters","page":"Objectives","title":"Cthonios.AbstractObjectiveParameters","text":"abstract type AbstractObjectiveParameters\n\n\n\n\n\n","category":"type"},{"location":"objectives/#Cthonios.Objective","page":"Objectives","title":"Cthonios.Objective","text":"struct Objective{D, F1, F2, F3, T}\n\ndomain::Any\nvalue::Any\ngradient::Any\nhessian::Any\ntimer::Any\n\n\n\n\n\n","category":"type"},{"location":"objectives/#Cthonios.ObjectiveParameters","page":"Objectives","title":"Cthonios.ObjectiveParameters","text":"struct ObjectiveParameters{U1, T, B, U2, U3} <: Cthonios.AbstractObjectiveParameters\n\nX::Any\nt::Any\nUbc::Any\nU::Any\nhvp_scratch::Any\n\n\n\n\n\n","category":"type"},{"location":"bcs/#Boundary-Conditions","page":"Boundary Conditions","title":"Boundary Conditions","text":"","category":"section"},{"location":"bcs/","page":"Boundary Conditions","title":"Boundary Conditions","text":"Modules = [Cthonios]\nPages = [\"BoundaryConditions.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"bcs/#Cthonios.DirichletBC","page":"Boundary Conditions","title":"Cthonios.DirichletBC","text":"struct DirichletBC{N, D, F} <: Cthonios.AbstractBCInput\n\nnset_name::Any\ndofs::Any\nfunc::Any\n\n\n\n\n\n","category":"type"},{"location":"bcs/#Cthonios.DirichletBCInternal","page":"Boundary Conditions","title":"Cthonios.DirichletBCInternal","text":"struct DirichletBCInternal{N, D, F} <: Cthonios.AbstractBCInternal\n\nnodes::Any\ndofs::Any\nfunc::Any\n\n\n\n\n\n","category":"type"},{"location":"bcs/#Cthonios.DirichletBCInternal-Tuple{Any, DirichletBC, Int64}","page":"Boundary Conditions","title":"Cthonios.DirichletBCInternal","text":"DirichletBCInternal(\n    mesh,\n    bc::DirichletBC,\n    n_dofs::Int64\n) -> Cthonios.DirichletBCInternal{_A, Vector{Int64}} where _A\n\n\n\n\n\n\n","category":"method"},{"location":"physics/#Physics","page":"Physics","title":"Physics","text":"","category":"section"},{"location":"physics/#General-methods-and-abstract-types","page":"Physics","title":"General methods and abstract types","text":"","category":"section"},{"location":"physics/","page":"Physics","title":"Physics","text":"Modules = [Cthonios]\nPages = [\"physics/Physics.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"physics/#Cthonios.AbstractPhysics","page":"Physics","title":"Cthonios.AbstractPhysics","text":"abstract type AbstractPhysics{NF, NP, NS}\n\nNF - Number of fields in this physics\n\nNP - Number of properties in this physics\n\nNS - Number of states in this physics\n\n\n\n\n\n","category":"type"},{"location":"physics/#Cthonios.num_fields-Union{Tuple{Cthonios.AbstractPhysics{NF, NP, NS}}, Tuple{NS}, Tuple{NP}, Tuple{NF}} where {NF, NP, NS}","page":"Physics","title":"Cthonios.num_fields","text":"num_fields(_::Cthonios.AbstractPhysics{NF, NP, NS}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"physics/#Cthonios.num_properties-Union{Tuple{Cthonios.AbstractPhysics{NF, NP, NS}}, Tuple{NS}, Tuple{NP}, Tuple{NF}} where {NF, NP, NS}","page":"Physics","title":"Cthonios.num_properties","text":"num_properties(\n    _::Cthonios.AbstractPhysics{NF, NP, NS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"physics/#Cthonios.num_states-Union{Tuple{Cthonios.AbstractPhysics{NF, NP, NS}}, Tuple{NS}, Tuple{NP}, Tuple{NF}} where {NF, NP, NS}","page":"Physics","title":"Cthonios.num_states","text":"num_states(_::Cthonios.AbstractPhysics{NF, NP, NS}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"physics/#Lagrangian-Solid-Mechanics","page":"Physics","title":"Lagrangian Solid Mechanics","text":"","category":"section"},{"location":"physics/","page":"Physics","title":"Physics","text":"Modules = [Cthonios]\nPages = [\"physics/SolidMechanics.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"physics/#Cthonios.SolidMechanics","page":"Physics","title":"Cthonios.SolidMechanics","text":"struct SolidMechanics{NF, NP, NS, Mat<:ConstitutiveModels.ConstitutiveModel{NP, NS}, Form<:FiniteElementContainers.AbstractMechanicsFormulation{NF}} <: Cthonios.AbstractPhysics{NF, NP, NS}\n\nmaterial_model::ConstitutiveModels.ConstitutiveModel\nformulation::FiniteElementContainers.AbstractMechanicsFormulation\n\n\n\n\n\n","category":"type"},{"location":"physics/#Cthonios.energy-Tuple{Cthonios.SolidMechanics, Any, Any}","page":"Physics","title":"Cthonios.energy","text":"energy(physics::Cthonios.SolidMechanics, cell, u_el) -> Any\n\n\nEnergy method at the quadrature level for Lagrangian solid mechanics. This equivalent to the quadrature point calculation needed for the  following integral Pi = int_Omegapsileft(mathbfFright)dOmega\n\n\n\n\n\n","category":"method"},{"location":"physics/#Cthonios.gradient-Tuple{Cthonios.SolidMechanics, Any, Any}","page":"Physics","title":"Cthonios.gradient","text":"gradient(\n    physics::Cthonios.SolidMechanics,\n    cell,\n    u_el\n) -> Any\n\n\nGradient method at the quadrature level for Lagrangian solid mechanics. This equivalent to the quadrature point calculation needed for the  following integral mathbff = int_OmegamathbfPdeltamathbfFdOmega\n\n\n\n\n\n","category":"method"},{"location":"physics/#Cthonios.hessian-Tuple{Cthonios.SolidMechanics, Any, Any}","page":"Physics","title":"Cthonios.hessian","text":"hessian(physics::Cthonios.SolidMechanics, cell, u_el) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"physics/#Poisson","page":"Physics","title":"Poisson","text":"","category":"section"},{"location":"physics/","page":"Physics","title":"Physics","text":"Modules = [Cthonios]\nPages = [\"physics/Poisson.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"physics/#Cthonios.Poisson","page":"Physics","title":"Cthonios.Poisson","text":"struct Poisson{F} <: Cthonios.AbstractPhysics{1, 0, 0}\n\nfunc::Any\n\n\n\n\n\n","category":"type"},{"location":"physics/#Cthonios.energy-Tuple{Poisson, Any, Any}","page":"Physics","title":"Cthonios.energy","text":"energy(physics::Poisson, cell, u_el) -> Any\n\n\nEnergy method for Poisson equation at a quadrature point Pilefturight = int_Omega leftfrac12nabla u^2 - furightdOmega\n\n\n\n\n\n","category":"method"},{"location":"physics/#Cthonios.gradient-Tuple{Poisson, Any, Any}","page":"Physics","title":"Cthonios.gradient","text":"gradient(physics::Poisson, cell, u_el) -> Any\n\n\nGradient method for Poisson equation at a quadrature point gleft(u vright) = int_Omega leftnabla ucdotnabla v - fvrightdOmega\n\n\n\n\n\n","category":"method"},{"location":"physics/#Cthonios.hessian-Tuple{Poisson, Any, Any}","page":"Physics","title":"Cthonios.hessian","text":"hessian(_::Poisson, cell, u_el) -> Any\n\n\nHessian method for Poisson equation at a quadrature point Hleft(u vright) = int_Omega leftnabla vcdotnabla vrightdOmega\n\n\n\n\n\n","category":"method"},{"location":"running_cthonios/","page":"Running Cthonios","title":"Running Cthonios","text":"CurrentModule = Cthonios","category":"page"},{"location":"running_cthonios/#Running-from-the-REPL","page":"Running Cthonios","title":"Running from the REPL","text":"","category":"section"},{"location":"running_cthonios/","page":"Running Cthonios","title":"Running Cthonios","text":"To run Cthonios from the REPL one can utilize the following method","category":"page"},{"location":"running_cthonios/","page":"Running Cthonios","title":"Running Cthonios","text":"TODO","category":"page"},{"location":"running_cthonios/#Running-Cthonios-as-an-executable","page":"Running Cthonios","title":"Running Cthonios as an executable","text":"","category":"section"},{"location":"running_cthonios/","page":"Running Cthonios","title":"Running Cthonios","text":"To run Cthonios as an executable, one must first run the CthoniosBuild.jl script (assuming one has PackageCompiler installed already). This will build an executable called cthonios in a build folder. To run Cthonios you can use the following command","category":"page"},{"location":"running_cthonios/","page":"Running Cthonios","title":"Running Cthonios","text":"/path/to/cthonios -i <input-file.yaml>","category":"page"},{"location":"running_cthonios/#Complete-example-input-file","page":"Running Cthonios","title":"Complete example input file","text":"","category":"section"},{"location":"running_cthonios/","page":"Running Cthonios","title":"Running Cthonios","text":"# Global scope\nfunctions:\n  displacement_ramp: \n    type: ScalarFunction{2, Float64, Float64, Float64}\n    expression: (x, t) -> -0.5 * t\n  zero_func:\n    type: ScalarFunction{2, Float64, Float64, Float64}\n    expression: (x, t) -> 0.0\n\nmaterials:\n  soft rubber:\n    model: NeoHookean\n    properties:\n      bulk modulus: 50.0\n      shear modulus: 1.0\n\nlinear solvers:\n  direct:\n    type: DirectLinearSolver\n    factorization method: ldl\n\nnonlinear solvers:\n  trs:\n    type: TrustRegionSolver\n    linear solver: direct\n    warm start: on\n\n# Domains scope\ndomains:\n  domain_1:\n    mesh:\n      type: ExodusDatabase{Int32, Int32, Int32, Float64}\n      file name: window_pain_tri3.g\n\n    boundary conditions:\n      displacement: \n      - nodeset ids: [3]\n        dofs: [1, 2]\n        function: zero_func\n      - nodeset ids: [1]\n        dofs: [1]\n        function: zero_func\n      - nodeset ids: [1]\n        dofs: [2]\n        function: displacement_ramp\n\n    sections:\n    - type: TotalLagrangeSection\n      block id: 1\n      formulation: plane strain\n      material: soft rubber\n\n    time stepper:\n      type: ConstantTimeStepper\n      start time: 0.0\n      end time: 1.0\n      time step: 0.025\n\nproblems:\n  - type: ForwardProblem\n    domain: domain_1\n    solver: trs\n    results:\n      output file name: output.e\n      nodal fields:\n      - displacement\n      - internal force\n      element fields:\n      - properties\n      quadrature fields:\n      - state variables\n\n  - type: EnergySensitivityProblem\n    domain: domain_1\n    solver: trs\n    results:\n      output file name: gradients.e\n      nodal fields:\n      - displacement\n      - dcoordinates\n      element fields:\n      - dproperties","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Cthonios","category":"page"},{"location":"#Cthonios","page":"Home","title":"Cthonios","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Cthonios.","category":"page"},{"location":"time_steppers/","page":"TimeSteppers","title":"TimeSteppers","text":"CurrentModule = Cthonios","category":"page"},{"location":"time_steppers/#Time-steppers","page":"TimeSteppers","title":"Time steppers","text":"","category":"section"},{"location":"time_steppers/","page":"TimeSteppers","title":"TimeSteppers","text":"Modules = [Cthonios]\nPages = [\"TimeSteppers.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"time_steppers/#Cthonios.ConstantTimeStepper","page":"TimeSteppers","title":"Cthonios.ConstantTimeStepper","text":"mutable struct ConstantTimeStepper{T<:Number} <: Cthonios.TimeStepper{T<:Number}\n\nstart_time::Number\nend_time::Number\ncurrent_time::Number\ncurrent_time_step::Int64\nΔt::Number\n\n\n\n\n\n","category":"type"},{"location":"time_steppers/#Cthonios.ConstantTimeStepper-Union{Tuple{T}, Tuple{T, T, T}} where T<:Number","page":"TimeSteppers","title":"Cthonios.ConstantTimeStepper","text":"ConstantTimeStepper(\n    start_time::Number,\n    end_time::Number,\n    Δt::Number\n) -> ConstantTimeStepper\n\n\n\n\n\n\n","category":"method"},{"location":"time_steppers/#Cthonios.EndTimeException","page":"TimeSteppers","title":"Cthonios.EndTimeException","text":"struct EndTimeException <: Exception\n\n\n\n\n\n","category":"type"},{"location":"time_steppers/#Cthonios.TimeStepper","page":"TimeSteppers","title":"Cthonios.TimeStepper","text":"abstract type TimeStepper{T}\n\n\n\n\n\n","category":"type"},{"location":"time_steppers/#Base.similar-Tuple{ConstantTimeStepper}","page":"TimeSteppers","title":"Base.similar","text":"similar(\n    _::ConstantTimeStepper\n) -> ConstantTimeStepper{Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"time_steppers/#Cthonios.end_time_error-Tuple{}","page":"TimeSteppers","title":"Cthonios.end_time_error","text":"end_time_error()\n\n\n\n\n\n\n","category":"method"},{"location":"time_steppers/#Cthonios.reset!-Tuple{ConstantTimeStepper}","page":"TimeSteppers","title":"Cthonios.reset!","text":"reset!(time::ConstantTimeStepper) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"time_steppers/#Cthonios.step!-Tuple{ConstantTimeStepper}","page":"TimeSteppers","title":"Cthonios.step!","text":"step!(time::ConstantTimeStepper) -> Int64\n\n\n\n\n\n\n","category":"method"}]
}
